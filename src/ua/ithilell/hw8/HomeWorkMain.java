package ua.ithilell.hw8;

import ua.ithilell.hw8.figures.Circle;
import ua.ithilell.hw8.figures.Figure;
import ua.ithilell.hw8.figures.Square;
import ua.ithilell.hw8.figures.Triangle;
import ua.ithilell.hw8.members.*;

/*  1. Створити базовий інтерфейс для геометричної фігури, в якому є метод, який повертає площу фігури.
        Створити 3 класи, які реалізують цей інтерфейс: коло, трикутник, квадрат.
        Створити масив фігур, і написати метод який виведе сумарну площу всіх фігур у цьому масиві
        2. Створіть тип даних Учасник та кілька його реалізацій: Людина, Кіт, Робот.
        3. Класи з п.2 повинні мати поведінку бігати і стрибати (методи просто виводять інформацію про дію в консоль).
        4. Створіть тип даних Перешкода та кілька її реалізацій: Бігова Доріжка та Стіна.
        5. Класи з п.3 повинні мати поведінку подолати перешкоду (overcome).
        6. Налагодити взаємодію між Учасником та Перешкодою.
        Іншими словами, учасники під час проходження через перешкоди мають виконувати відповідні дії (бігти чи стрибати).
        Наприклад: Людина пробігла бігову доріжку.
        7. Створіть два масиви: з учасниками та перешкодами.
        8. Кожен елемент з масиву з учасниками повинен пройти кожну перешкоду з масиву з перешкодами.
        9. * У перешкод є довжина (для доріжки) або висота (для стіни), а учасників обмеження на біг та стрибки.
        Якщо учасник не зміг пройти одну з перешкод, то наступного він не приступає (цілком вибуває з участі в серії перешкод).
        10. * Результат виконання учасником конкретної перешкоди виводити у консоль. Наприклад: "Учасник[ІМ'Я] пройшов перешкоду[НАЗВА] на дистанції[ЗНАЧЕННЯ]"

        "Учасник[ІМ'Я] не пройшов перешкоду[НАЗВА] на дистанції[ЗНАЧЕННЯ]. Пройдено[ЗНАЧЕНИЕ]"*/
public class HomeWorkMain {

    public static void main(String[] args) {
        Figure [] figures = {
                new Circle(2),
                new Triangle(3, 5),
                new Square(4)
        };

        for (int i=0; i<figures.length; i++){
            System.out.println(figures[i].area());
        }

        Member[] members = {
                new Human("Bob", 2, 3000),
                new Human("Ben", 1, 5000),
                new Human("Alex", 3, 1000),
                new Robot("R2D2", 0, 10000),
                new Robot("BB-8", 10, 500),
                new Robot("LM-432", 5, 100000),
                new Cat("Oscar", 5, 100000),
                new Cat("Fluffy", 5, 100000),
                new Cat("Simba", 5, 100000)
        };

        Obstacle[] obstacles = {
                new Wall(1),
                new RunningTrack(100),
                new Wall(2),
                new RunningTrack(500),
                new Wall(3),
                new RunningTrack(10000),
                new Wall(5),
                new RunningTrack(3000)
        };

        for (int i=0; i<members.length; i++){
            m:for (int j=0; j<obstacles.length; j++){
                if (members[i].isParticipant()) {
                    obstacles[j].overcome(members[i]);
                } else {
                    break m;
                }
            }
        }
    }
}
